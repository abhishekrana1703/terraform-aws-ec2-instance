name: Deploy Azure VM with Terraform

on:
  workflow_dispatch:
    inputs:
      resource_group_name:
        description: 'Resource Group Name'
        required: true
        default: 'example-resources'
      location:
        description: 'Azure Region'
        required: true
        default: 'West Europe'
      vm_name:
        description: 'Virtual Machine Name'
        required: true
        default: 'example-vm'
      admin_username:
        description: 'Admin Username'
        required: true
      admin_password:
        description: 'Admin Password'
        required: true
        default: 'P@ssw0rd1234'  # Change this to a secure default or prompt for input
      azure_client_id:
        description: 'Azure Client ID'
        required: true
      azure_client_secret:
        description: 'Azure Client Secret'
        required: true
      azure_tenant_id:
        description: 'Azure Tenant ID'
        required: true
      azure_subscription_id:
        description: 'Azure Subscription ID'
        required: true

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.5.0  # Specify your desired Terraform version

    - name: Configure Azure Credentials
      env:
        AZURE_CLIENT_ID: ${{ github.event.inputs.azure_client_id }}
        AZURE_CLIENT_SECRET: ${{ github.event.inputs.azure_client_secret }}
        AZURE_TENANT_ID: ${{ github.event.inputs.azure_tenant_id }}
        AZURE_SUBSCRIPTION_ID: ${{ github.event.inputs.azure_subscription_id }}
      run: |
        echo "Configuring Azure credentials"
        az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID

    - name: Initialize Terraform
      run: terraform init

    - name: Plan Terraform
      run: |
        terraform plan \
          -var="resource_group_name=${{ github.event.inputs.resource_group_name }}" \
          -var="location=${{ github.event.inputs.location }}" \
          -var="vm_name=${{ github.event.inputs.vm_name }}" \
          -var="admin_username=${{ github.event.inputs.admin_username }}" \
          -var="admin_password=${{ github.event.inputs.admin_password }}"

    - name: Apply Terraform
      run: |
        terraform apply \
          -var="resource_group_name=${{ github.event.inputs.resource_group_name }}" \
          -var="location=${{ github.event.inputs.location }}" \
          -var="vm_name=${{ github.event.inputs.vm_name }}" \
          -var="admin_username=${{ github.event.inputs.admin_username }}" \
          -var="admin_password=${{ github.event.inputs.admin_password }}" \
          -auto-approve

    - name: Clean up
      if: ${{ github.event_name == 'push' }}
      run: terraform destroy -auto-approve
